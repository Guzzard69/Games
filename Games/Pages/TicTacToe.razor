@page "/tictactoe"
@using Games.TicTacToeClasses

<h3>Tic-Tac-Toe</h3>

<p style="@(game.Winner != TicTacToeTeam.None ? "font-size: 50px;" : "")">Winner: @game.Winner</p>

@if (game.IsCrossTurn)
{
    <p class="blue">Cross Turn</p>
}
else
{
    <p class="red">Circle Turn</p>
}

<button @onclick="ResetGame" class="btn btn-primary mb-3">New Game</button>

<div class="grid mb-3">
    @for (var i = 0; i < 3; i++)
    {
        <div class="row">
            @for (var j = 0; j < 3; j++)
            {
                var x = i;
                var y = j;
                <div class="square border p-3" @onclick="() => ChangeStatus(x, y)">
                    <i class="@game.grid.GetSquare(x, y).GetStatusHtml() square-content"></i>
                </div>
            }
        </div>
    }
</div>

<div class="row">
    <div class="col-md-8 col-lg-4">
        <div class="btn-group w-100 mb-3">
            <button @onclick="ChangeOpponentStatus" class="btn w-50 @(playVsComputer ? "active btn-primary" : "btn-outline-secondary")" disabled="@(!game.grid.isEmpty)">
                Play vs. Computer
            </button>
            <button @onclick="ChangeOpponentStatus" class="btn w-50 @(!playVsComputer ? "active btn-primary" : "btn-outline-secondary")" disabled="@(!game.grid.isEmpty)">
                Play vs. Human
            </button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-8 col-lg-4">
        <div class="btn-group w-100 mb-3">
            <button @onclick="ChangePlayIcon" class="btn w-50 @(playAsX ? "active btn-success" : "btn-outline-secondary")" disabled="@(!game.grid.isEmpty || !playVsComputer)">
                Play as X
            </button>
            <button @onclick="ChangePlayIcon" class="btn w-50 @(!playAsX ? "active btn-success" : "btn-outline-secondary")" disabled="@(!game.grid.isEmpty || !playVsComputer)">
                Play as O
            </button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-8 col-lg-4">
        <div class="btn-group w-100 mb-3">
            <button @onclick="ChangeStartTeam" class="btn w-50 @(crossStart ? "active btn-danger" : "btn-outline-secondary")" disabled="@(!game.grid.isEmpty)">
                Cross Start
            </button>
            <button @onclick="ChangeStartTeam" class="btn w-50 @(!crossStart ? "active btn-danger" : "btn-outline-secondary")" disabled="@(!game.grid.isEmpty)">
                Circle Start
            </button>
        </div>
    </div>
</div>

<style>
    @@media (max-width: 768px) {
        .square {
            width: 30vw;
            height: 30vw;
        }

        .square-content {
            font-size: 22vw;
        }
    }

    @@media (min-width: 768px){
        .square {
            width: 9vw;
            height: 9vw;
        }

        .square-content {
            font-size: 6vw;
        }
    }

    .red {
        color: red;
    }

    .blue {
        color: dodgerblue;
    }
</style>

@code {
    TicTacToeGame game = new TicTacToeGame(new AiOpponent(TicTacToeTeam.Circle), true);

    bool playAsX = true;

    bool playVsComputer = true;

    bool crossStart = true;

    public void ResetGame()
    {
        game = new TicTacToeGame(new AiOpponent(playAsX ? TicTacToeTeam.Circle : TicTacToeTeam.Cross), playAsX);

        // Makes player go first so AI doesnt lock player into game.
        if (playVsComputer && crossStart != playAsX)
        {
            crossStart = playAsX;
        }
    }

    public void ChangeStatus(int xPos, int yPos)
    {
        game.ExecuteTurn(xPos, yPos, playVsComputer);
    }

    public void ChangeOpponentStatus()
    {
        playVsComputer = !playVsComputer;
    }

    public void ChangePlayIcon()
    {
        playAsX = !playAsX;
        game.Opponent.AiTeam = game.GetOppositeTeam(game.Opponent.AiTeam);
        game.IsCrossTurn = !game.IsCrossTurn;

        if (playVsComputer && (playAsX != crossStart))
        {
            game.IsCrossTurn = !game.IsCrossTurn;
            game.AiMove();
        }
    }

    public void ChangeStartTeam()
    {
        crossStart = !crossStart;
        game.IsCrossTurn = !game.IsCrossTurn;

        if (playVsComputer && (playAsX != crossStart))
        {
            game.AiMove();
        }
    }
}
