@page "/minesweeper"
@using Games.MinesweeperClasses
@using Games.MinesweeperClasses.Enums

@{
    //<div class="square border @(Game.Grid.GetSquare(x, y).IsBomb ? "green" : "")" @onclick="() => RevealSquare(x, y)">
}

<div class="container-fluid">
    <h3 class="mb-3">Minesweeper</h3>

    @if (Game.Grid.IsLost)
    {
        <h5>You Lost</h5>
    }
    else if (Game.Grid.IsWon)
    {
        <h5>You Won</h5>
    }

    <button @onclick="ResetGame" class="btn btn-primary mb-3">New Game</button>
    <br />
    <div class="btn-group mb-3">
        <button class="btn btn-success" @onclick="() => SetGrid(10, 8, 10)">
            Easy
        </button>
        <button class="btn btn-secondary" @onclick="() => SetGrid(18, 14, 40)">
            Medium
        </button>
        <button class="btn btn-danger" @onclick="() => SetGrid(24, 20, 99)">
            Hard
        </button>
    </div>

    <div class="grid mb-3">
        @for (var i = 0; i < Game.Grid.Height; i++)
        {
            <div class="row">
                @for (var j = 0; j < Game.Grid.Width; j++)
                {
                    var x = j;
                    var y = i;
                    <div class="square border" @onclick="() => RevealSquare(x, y)">
                        <i class="square-content @(Game.Grid.GetSquare(x, y).IsBomb && Game.Grid.GetSquare(x, y).Status == MinesweeperSquareStatus.Revealed ? "oi oi-warning" : "")"></i>
                        <p>@(!Game.Grid.GetSquare(x, y).IsBomb && Game.Grid.GetSquare(x, y).Status == MinesweeperSquareStatus.Revealed ? Game.Grid.GetNumOfAdjacentBombs(x, y).ToString() : "")</p>
                    </div>
                }
            </div>
        }
    </div>

    <div class="row col-md-6">
        <ul class="list-group">
            <li class="list-group-item">
                <div class="row">
                    <div class="col-md-7">
                        <div>Grid Width: @GridWidth</div>
                    </div>
                    <div class="col-md-5">
                        <div class="btn-group">
                            <button class="btn btn-outline-primary" @onclick="() => ChangeGridDimension(() => GridWidth++)">
                                <i class="oi oi-arrow-thick-top"></i>
                            </button>
                            <button class="btn btn-outline-primary" @onclick="() => ChangeGridDimension(() => GridWidth--)">
                                <i class="oi oi-arrow-thick-bottom"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </li>
            <li class="list-group-item">
                <div class="row">
                    <div class="col-md-7">
                        <div>Grid Height: @GridHeight</div>
                    </div>
                    <div class="col-md-5">
                        <div class="btn-group">
                            <button class="btn btn-outline-success" @onclick="() => ChangeGridDimension(() => GridHeight++)">
                                <i class="oi oi-arrow-thick-top"></i>
                            </button>
                            <button class="btn btn-outline-success" @onclick="() => ChangeGridDimension(() => GridHeight--)">
                                <i class="oi oi-arrow-thick-bottom"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </li>
            <li class="list-group-item">
                <div class="row">
                    <div class="col-md-7">
                        <div>Number of Bombs: @NumBombs</div>
                    </div>
                    <div class="col-md-5">
                        <div class="btn-group">
                            <button class="btn btn-outline-danger" @onclick="() => ChangeGridDimension(() => NumBombs++)">
                                <i class="oi oi-arrow-thick-top"></i>
                            </button>
                            <button class="btn btn-outline-danger" @onclick="() => ChangeGridDimension(() => NumBombs--)">
                                <i class="oi oi-arrow-thick-bottom"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </li>
        </ul>
    </div>
</div>

<style>
    .square {
        width: 3vw;
        height: 3vw;
        border-color: black !important;
    }

    .square-content {
        font-size: 2vw;
    }

    .green {
        background-color: lawngreen;
    }
</style>

@code {
    MinesweeperGame Game = new MinesweeperGame(10, 10, 0, 0, 0);

    int GridWidth = 10;

    int GridHeight = 10;

    int NumBombs = 30;

    private void ResetGame()
    {
        Game.Grid.ClearGrid();
    }

    public void ChangeGridDimension(Action changeDimension)
    {
        changeDimension();

        //fix this
        if (GridHeight < 0)
        {
            GridHeight = 1;
            return;
        }
        if (GridWidth < 0)
        {
            GridWidth = 1;
            return;
        }
        if (NumBombs < 0)
        {
            NumBombs = 1;
            return;
        }

        Game.Grid = new MinesweeperGrid(GridWidth, GridHeight, 0, 0, 0);
    }

    public void SetGrid(int gridWidth, int gridHeight, int numBombs)
    {
        GridWidth = gridWidth;
        GridHeight = gridHeight;
        NumBombs = numBombs;
        Game.Grid = new MinesweeperGrid(gridWidth, gridHeight, 0, 0, 0);
    }

    private void RevealSquare(int xPos, int yPos)
    {
        if (Game.Grid.IsEmpty)
        {
            Game = new MinesweeperGame(GridWidth, GridHeight, NumBombs, xPos, yPos);
        }
        if (!Game.Grid.IsLost)
        {
            Game.Grid.GetSquare(xPos, yPos).Reveal();
        }
    }

    private void FlagSquare(int xPos, int yPos)
    {
        Game.Grid.GetSquare(xPos, yPos).Flag();
    }
}
